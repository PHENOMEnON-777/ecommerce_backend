// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
enum Role {
  ADMIN
  USER
}

enum OrderEventstatus {
  PENDING
  ACCEPTED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}
model User {
id Int @id @default(autoincrement())
name String
email String @unique
password String
role Role @default(USER)
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
addresses Address[]
cartitem CartItem[]
orders Orders[]

@@map("users")
}

model Address {
id Int @id @default(autoincrement())
lineone String
linetwo String
city String
country String
pincode String
userId Int
user User @relation(fields: [userId], references: [id])
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

@@map("addreases")

}


model Product{

  id Int @id @default(autoincrement())
  name String
  decription String
  price Decimal
  tag String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cartitem CartItem[]
  orderproduct OrderProduct[]

@@map("products")

}


model CartItem {
  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields: [userId], references: [id])
  productId Int  
  quantity Int
  product Product @relation(fields: [productId],references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart_item")
}

model Orders{
  id Int @id @default(autoincrement())
  userId Int
  netAmount Decimal
  address String
  user User @relation(fields: [userId],references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderproduct OrderProduct[]
  orderevent OrderEvent[]

  @@map("orders")
}

model OrderProduct{
  id Int @id @default(autoincrement())
  orderId Int
  order Orders @relation(fields: [orderId],references: [id])
  productId Int
  product Product @relation(fields: [productId],references: [id])
  quantity Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_product")
}

model OrderEvent{
  id Int @id @default(autoincrement())
orderId Int
  order Orders @relation(fields: [orderId],references: [id])
status OrderEventstatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("order_event")
}